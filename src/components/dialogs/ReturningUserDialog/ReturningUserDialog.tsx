import {
  Dialog,
  Card,
  CardContent,
  Typography,
  Grid,
  Button,
  FormControl,
  InputAdornment,
  MenuItem,
  Select,
  TextField,
} from '@mui/material'
import { DateTime } from 'luxon'
import React, { useContext } from 'react'
import { Controller, SubmitHandler, useForm } from 'react-hook-form'
import { useMutation, useQueryClient } from 'react-query'
import { UserContext } from '../../../app/App'
import {
  ActivityLevel,
  Cycle,
  DailyEntry,
  EntryConsumable,
} from '../../../model/Model'
import { DataService } from '../../../services/DataService'
import { Calculate } from '../../../utilities/Calculate'
import { Sort } from '../../../utilities/Sort'
import { useMediaQueries } from '../../../utilities/useMediaQueries'
interface IFormInput {
  weight: number
  activityLevel: ActivityLevel
}

interface Props {
  open: boolean
  dataService: DataService
  cycle: Cycle | null
  entries: DailyEntry[]
  setDialogOpenState: React.Dispatch<React.SetStateAction<boolean>>
}
const today = DateTime.now().startOf('day')
const yesterday = today.minus({ days: 1 })
export const ReturningUserDialog: React.FC<Props> = ({
  open,
  dataService,
  cycle,
  entries,
  setDialogOpenState,
}) => {
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    control,
    formState: { errors },
  } = useForm()
  const user = useContext(UserContext)
  const { matchesMD } = useMediaQueries()
  const queryClient = useQueryClient()
  const calculate = new Calculate()
  let missingDay = yesterday
  const lastActiveDay = DateTime.fromISO(entries[0].entryDate)

  const missingDays: string[] = []

  while (missingDay.valueOf() > lastActiveDay.valueOf()) {
    missingDays.push(missingDay.toISODate()?.split('-')?.join(''))
    missingDay = missingDay.startOf('day').minus({ days: 1 })
  }
  // console.log(missingDays)
  const { mutate: createNewDailyEntry, isLoading } = useMutation(
    (dailyEntry: DailyEntry) => dataService.createDailyEntry(dailyEntry)
    // {
    //   onSuccess: async (data) => {
    //     // refetchEntries()
    //     await queryClient.refetchQueries(['dailyEntries'])
    //     reset()
    //   },
    // }
  )
  if (!user) {
    return null
  }
  const submitMissedEntries = async (
    currentWeight: number,
    currentActivityLevel: ActivityLevel
  ) => {
    const startingWeight = entries[0].dailyEntryWeight
    const numberOfMissedEntries = missingDays.length + 1
    const weightChange = startingWeight - currentWeight
    const averageWeightChangePerDay =
      Math.round((weightChange / numberOfMissedEntries) * 10) / 10
    const { birthday, sex, height } = user
    const age = calculate.age(birthday)

    let generatedWeight = startingWeight

    const generatedEntries: DailyEntry[] = missingDays.reverse().map((day) => {
      generatedWeight = generatedWeight - averageWeightChangePerDay
      const bmr = calculate.BMR(height, generatedWeight, age, sex)
      const tdee = calculate.TDEE(bmr!, 'SEDENTARY')
      const avgerageChangePerDayInFatEnergy = averageWeightChangePerDay * 3500

      let caloriesRelativeToTDEE = 0

      if (parseInt(tdee) > avgerageChangePerDayInFatEnergy) {
        caloriesRelativeToTDEE =
          parseInt(tdee) - avgerageChangePerDayInFatEnergy
      }

      const generatedConsumable: EntryConsumable = {
        name: 'Generated Entry',
        calories: caloriesRelativeToTDEE,
        protein: Math.round((caloriesRelativeToTDEE * 0.25) / 4),
        fat: Math.round((caloriesRelativeToTDEE * 0.25) / 9),
        carbohydrates: Math.round((caloriesRelativeToTDEE * 0.5) / 4),
      }

      const dailyEntryConsumables =
        caloriesRelativeToTDEE > 0 ? [generatedConsumable] : []

      return {
        PK: user.sub,
        SK: day,
        GSI1PK: `C_${cycle?.cycleId!}`,
        GSI1SK: 'DAILYENTRIES',
        type: 'DAILYENTRY',
        dailyEntryWeight: Math.round(generatedWeight * 10) / 10,
        dailyEntryConsumables: dailyEntryConsumables,
        dailyEntryActivityLevel: 'SEDENTARY',
        entryDate: day,
        autoGenerated: true,
        cycleId: cycle?.cycleId!,
      }
    })
    const todayISO = today.toISODate()?.split('-')?.join('')
    generatedEntries.push({
      PK: user.sub,
      SK: todayISO,
      GSI1PK: `C_${cycle?.cycleId!}`,
      GSI1SK: 'DAILYENTRIES',
      type: 'DAILYENTRY',
      dailyEntryWeight: currentWeight,
      dailyEntryConsumables: [],
      dailyEntryActivityLevel: currentActivityLevel,
      entryDate: todayISO,
      autoGenerated: true,
      cycleId: cycle?.cycleId!,
    })

    generatedEntries.forEach((entry) => {
      createNewDailyEntry(entry, {
        onSuccess: async () => {
          await queryClient.refetchQueries(['dailyEntries'])
          setDialogOpenState(false)
        },
      })
    })
    // console.log(generatedEntries)
  }

  const onSubmit: SubmitHandler<IFormInput> = (data) => {
    submitMissedEntries(data.weight, data.activityLevel)
  }

  return (
    <Dialog open={open} fullScreen={!matchesMD}>
      <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
        <CardContent>
          <Typography variant="h4" align="center">
            Welcome Back!
          </Typography>
          <Typography align="center">
            Looks like you've been away for a few days. Go ahead and weigh in
            for today and we'll auto generate entries for the days you were gone
            based on where you currently stand.
          </Typography>
        </CardContent>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} autoComplete="off">
            <Grid container justifyContent="space-evenly">
              <Grid item>
                <Grid
                  item
                  container
                  direction="column"
                  alignItems="center"
                  sx={[
                    { padding: '2rem' },
                    !matchesMD && { padding: '2rem 0 2rem 0' },
                  ]}
                >
                  <Grid item>
                    <Controller
                      name="weight"
                      control={control}
                      defaultValue={0}
                      render={({
                        field,
                        fieldState: { invalid, isTouched, isDirty, error },
                      }) => (
                        <FormControl sx={{ width: '9ch' }}>
                          <TextField
                            {...field}
                            error={invalid}
                            helperText={
                              invalid && 'Weight must be greater than 50 lbs'
                            }
                            sx={{ minWidth: '100%' }}
                            variant="standard"
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                  lbs
                                </InputAdornment>
                              ),
                            }}
                          />
                        </FormControl>
                      )}
                      rules={{ min: 50 }}
                    />
                  </Grid>
                  <Grid item>Weight</Grid>
                </Grid>
              </Grid>
              <Grid item>
                <Grid
                  item
                  container
                  direction="column"
                  alignItems="center"
                  sx={[
                    { padding: '2rem' },
                    !matchesMD && { padding: '2rem 0 2rem 0' },
                  ]}
                >
                  <Grid item>
                    <Controller
                      name="activityLevel"
                      control={control}
                      defaultValue="SEDENTARY"
                      render={({ field: { onChange, value } }) => (
                        <Select
                          {...register}
                          variant="standard"
                          value={value}
                          onChange={onChange}
                          displayEmpty
                          inputProps={{ 'aria-label': 'Without label' }}
                          sx={{ minWidth: '100%' }}
                        >
                          <MenuItem value={'SEDENTARY'}>Sedentary</MenuItem>
                          <MenuItem value={'LIGHTLY_ACTIVE'}>
                            Lightly Active
                          </MenuItem>
                          <MenuItem value={'MODERATELY_ACTIVE'}>
                            Moderately Active
                          </MenuItem>
                          <MenuItem value={'VERY_ACTIVE'}>Very Active</MenuItem>
                          <MenuItem value={'EXTRA_ACTIVE'}>
                            Extra Active
                          </MenuItem>
                        </Select>
                      )}
                    />
                  </Grid>
                  <Grid item>Acivity Level</Grid>
                </Grid>
              </Grid>
            </Grid>
            <Grid container justifyContent="center">
              <Button
                variant="contained"
                type="submit"
                sx={{ marginTop: '1rem' }}
              >
                Submit
              </Button>
            </Grid>
          </form>
        </CardContent>
      </Card>
    </Dialog>
  )
}
