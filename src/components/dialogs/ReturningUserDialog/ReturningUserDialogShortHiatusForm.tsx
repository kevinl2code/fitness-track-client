import {
  Grid,
  FormControl,
  TextField,
  InputAdornment,
  Select,
  MenuItem,
  Button,
} from '@mui/material'
import { DateTime } from 'luxon'
import React from 'react'
import {
  Control,
  Controller,
  FieldValues,
  SubmitHandler,
  UseFormHandleSubmit,
  UseFormRegister,
} from 'react-hook-form'
import { useQueryClient, useMutation } from 'react-query'
import {
  ActivityLevel,
  Cycle,
  DailyEntry,
  EntryConsumable,
  UserState,
} from '../../../model/Model'
import { Calculate } from '../../../utilities/Calculate'
import { dataService } from '../../../app/App'
import { useMediaQueries } from '../../../utilities/useMediaQueries'

interface IFormInput {
  weight: number
  activityLevel: ActivityLevel
}

interface Props {
  entries: DailyEntry[]
  cycle: Cycle
  user: UserState
  control: Control<FieldValues, object>
  register: UseFormRegister<FieldValues>
  handleSubmit: UseFormHandleSubmit<FieldValues>
  setDialogOpenState: React.Dispatch<React.SetStateAction<boolean>>
}

const today = DateTime.now().startOf('day')
const yesterday = today.minus({ days: 1 })

export const ReturningUserDialogShortHiatusForm: React.FC<Props> = ({
  entries,
  cycle,
  user,
  control,
  register,
  handleSubmit,
  setDialogOpenState,
}) => {
  const queryClient = useQueryClient()
  const calculate = new Calculate()
  const cycleStart = DateTime.fromISO(cycle.startDate)
  let missingDay = yesterday
  const lastActiveDay = DateTime.fromISO(entries[0].entryDate)

  const missingDays: string[] = []

  while (missingDay.valueOf() > lastActiveDay.valueOf()) {
    missingDays.push(missingDay.toISODate()?.split('-')?.join(''))
    missingDay = missingDay.startOf('day').minus({ days: 1 })
  }

  const { mutate: createNewDailyEntry, isLoading } = useMutation(
    (dailyEntry: DailyEntry) => dataService.createDailyEntry(dailyEntry)
  )

  const submitMissedEntries = async (
    currentWeight: number,
    currentActivityLevel: ActivityLevel
  ) => {
    const startingWeight = entries[0].dailyEntryWeight
    const numberOfMissedEntries = missingDays.length + 1
    const weightChange = startingWeight - currentWeight
    const averageWeightChangePerDay =
      Math.round((weightChange / numberOfMissedEntries) * 10) / 10
    const { birthday, sex, height, sub } = user
    const age = calculate.age(birthday)
    const planDuration = calculate.planDuration(
      cycle.startDate,
      cycle.endingDate
    )
    let generatedWeight = startingWeight

    const generatedEntries: DailyEntry[] = missingDays.reverse().map((day) => {
      generatedWeight = generatedWeight - averageWeightChangePerDay
      const entryDateTime = DateTime.fromISO(day)
      const generatedDaysSinceStart = Math.floor(
        entryDateTime.diff(cycleStart, 'days').days
      )

      const generatedDaysRemaining = planDuration - generatedDaysSinceStart
      const generatedPoundsToGo = generatedWeight - cycle.goalWeight
      const generatedCaloriesToGo = generatedPoundsToGo * 3500
      const generatedDeficitPerDay =
        generatedCaloriesToGo / generatedDaysRemaining
      const generatedBMR = calculate.BMR(height, generatedWeight, age, sex)
      const generatedTDEE = calculate.TDEE(generatedBMR, 'SEDENTARY')
      const generatedTargetCalories = Math.round(
        generatedTDEE - generatedDeficitPerDay
      )
      const avgerageChangePerDayInFatEnergy = averageWeightChangePerDay * 3500
      let caloriesRelativeToTDEE = 0

      if (generatedTDEE > avgerageChangePerDayInFatEnergy) {
        caloriesRelativeToTDEE = generatedTDEE - avgerageChangePerDayInFatEnergy
      }
      const generatedConsumable: EntryConsumable = {
        name: 'Generated Entry',
        calories: caloriesRelativeToTDEE,
        protein: Math.round((caloriesRelativeToTDEE * 0.25) / 4),
        fat: Math.round((caloriesRelativeToTDEE * 0.25) / 9),
        carbohydrates: Math.round((caloriesRelativeToTDEE * 0.5) / 4),
      }

      const dailyEntryConsumables =
        caloriesRelativeToTDEE > 0 ? [generatedConsumable] : []

      return {
        PK: sub,
        SK: day,
        GSI1PK: `C_${cycle?.cycleId!}`,
        GSI1SK: 'DAILYENTRIES',
        type: 'DAILYENTRY',
        dailyEntryWeight: Math.round(generatedWeight * 10) / 10,
        dailyEntryConsumables: dailyEntryConsumables,
        dailyEntryActivityLevel: 'SEDENTARY',
        entryDate: day,
        autoGenerated: true,
        targetCalories: generatedTargetCalories,
        cycleId: cycle?.cycleId!,
      }
    })
    const todayISO = today.toISODate()?.split('-')?.join('')
    const daysSinceStart = Math.floor(today.diff(cycleStart, 'days').days)
    const daysRemaining = planDuration - daysSinceStart
    const poundsToGo = currentWeight - cycle.goalWeight
    const caloriesToGo = poundsToGo * 3500
    const deficitPerDay = caloriesToGo / daysRemaining
    const todayBMR = calculate.BMR(height, currentWeight, age, sex)
    const todayTDEE = calculate.TDEE(todayBMR, currentActivityLevel)
    const targetCalories = Math.round(todayTDEE - deficitPerDay)

    generatedEntries.push({
      PK: sub,
      SK: todayISO,
      GSI1PK: `C_${cycle?.cycleId!}`,
      GSI1SK: 'DAILYENTRIES',
      type: 'DAILYENTRY',
      dailyEntryWeight: currentWeight,
      dailyEntryConsumables: [],
      dailyEntryActivityLevel: currentActivityLevel,
      entryDate: todayISO,
      autoGenerated: true,
      targetCalories: targetCalories,
      cycleId: cycle?.cycleId!,
    })
    generatedEntries.forEach((entry) => {
      createNewDailyEntry(entry, {
        onSuccess: async () => {
          await queryClient.refetchQueries(['dailyEntries'])
          setDialogOpenState(false)
        },
      })
    })
  }

  const onSubmit: SubmitHandler<IFormInput> = (data) => {
    submitMissedEntries(data.weight, data.activityLevel)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} autoComplete="off">
      <Grid container justifyContent="space-evenly">
        <Grid item>
          <Grid
            item
            container
            direction="column"
            alignItems="center"
            sx={{ padding: '2rem 0 2rem 0' }}
          >
            <Grid item>
              <Controller
                name="weight"
                control={control}
                defaultValue={0}
                render={({
                  field,
                  fieldState: { invalid, isTouched, isDirty, error },
                }) => (
                  <FormControl sx={{ width: '9ch' }}>
                    <TextField
                      {...field}
                      error={invalid}
                      helperText={
                        invalid && 'Weight must be greater than 50 lbs'
                      }
                      sx={{ minWidth: '100%' }}
                      variant="standard"
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">lbs</InputAdornment>
                        ),
                      }}
                    />
                  </FormControl>
                )}
                rules={{ min: 50 }}
              />
            </Grid>
            <Grid item>Weight</Grid>
          </Grid>
        </Grid>
        <Grid item>
          <Grid
            item
            container
            direction="column"
            alignItems="center"
            sx={{ padding: '2rem 0 2rem 0' }}
          >
            <Grid item>
              <Controller
                name="activityLevel"
                control={control}
                defaultValue="SEDENTARY"
                render={({ field: { onChange, value } }) => (
                  <Select
                    {...register}
                    variant="standard"
                    value={value}
                    onChange={onChange}
                    displayEmpty
                    inputProps={{ 'aria-label': 'Without label' }}
                    sx={{ minWidth: '100%' }}
                  >
                    <MenuItem value={'SEDENTARY'}>Sedentary</MenuItem>
                    <MenuItem value={'LIGHTLY_ACTIVE'}>Lightly Active</MenuItem>
                    <MenuItem value={'MODERATELY_ACTIVE'}>
                      Moderately Active
                    </MenuItem>
                    <MenuItem value={'VERY_ACTIVE'}>Very Active</MenuItem>
                    <MenuItem value={'EXTRA_ACTIVE'}>Extra Active</MenuItem>
                  </Select>
                )}
              />
            </Grid>
            <Grid item>Acivity Level</Grid>
          </Grid>
        </Grid>
      </Grid>
      <Grid container justifyContent="center">
        <Button variant="contained" type="submit" sx={{ marginTop: '1rem' }}>
          Submit
        </Button>
      </Grid>
    </form>
  )
}
